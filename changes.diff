diff --git a/server/docker-compose.yaml b/server/docker-compose.yaml
index 521a52b..3a3d107 100644
--- a/server/docker-compose.yaml
+++ b/server/docker-compose.yaml
@@ -12,6 +12,7 @@ services:
       - '5432:5432'
     volumes:
       - postgres-data:/var/lib/postgresql/data
+      - ./docker/init:/docker-entrypoint-initdb.d
 
   api:
     build: .
diff --git a/server/package-lock.json b/server/package-lock.json
index caf78c5..c39f2be 100644
--- a/server/package-lock.json
+++ b/server/package-lock.json
@@ -12,14 +12,18 @@
         "@fastify/cors": "^11.0.1",
         "@prisma/client": "^6.12.0",
         "bcrypt": "^6.0.0",
+        "dotenv": "^17.2.1",
         "fastify": "^5.4.0",
-        "fastify-cookie": "^5.6.1"
+        "fastify-cookie": "^5.6.1",
+        "zod": "^4.0.10"
       },
       "devDependencies": {
         "@types/bcrypt": "^6.0.0",
+        "@types/cookie-signature": "^1.1.2",
         "@types/node": "^24.1.0",
         "@types/supertest": "^6.0.3",
         "@vitest/ui": "^3.2.4",
+        "cookie-signature": "^1.2.2",
         "prisma": "^6.12.0",
         "supertest": "^7.1.4",
         "ts-node-dev": "^2.0.0",
@@ -1068,6 +1072,16 @@
         "@types/deep-eql": "*"
       }
     },
+    "node_modules/@types/cookie-signature": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@types/cookie-signature/-/cookie-signature-1.1.2.tgz",
+      "integrity": "sha512-2OhrZV2LVnUAXklUFwuYUTokalh/dUb8rqt70OW6ByMSxYpauPZ+kfNLknX3aJyjY5iu8i3cUyoLZP9Fn37tTg==",
+      "dev": true,
+      "license": "MIT",
+      "dependencies": {
+        "@types/node": "*"
+      }
+    },
     "node_modules/@types/cookiejar": {
       "version": "2.1.5",
       "resolved": "https://registry.npmjs.org/@types/cookiejar/-/cookiejar-2.1.5.tgz",
@@ -1698,6 +1712,18 @@
         "node": ">=0.3.1"
       }
     },
+    "node_modules/dotenv": {
+      "version": "17.2.1",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.1.tgz",
+      "integrity": "sha512-kQhDYKZecqnM0fCnzI5eIv5L4cAe/iRI+HqMbO/hbRdTAeXDG+M9FjipUxNfbARuEg4iHIbhnhs78BCHNbSxEQ==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://dotenvx.com"
+      }
+    },
     "node_modules/dunder-proto": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
@@ -3773,6 +3799,15 @@
       "engines": {
         "node": ">=6"
       }
+    },
+    "node_modules/zod": {
+      "version": "4.0.10",
+      "resolved": "https://registry.npmjs.org/zod/-/zod-4.0.10.tgz",
+      "integrity": "sha512-3vB+UU3/VmLL2lvwcY/4RV2i9z/YU0DTV/tDuYjrwmx5WeJ7hwy+rGEEx8glHp6Yxw7ibRbKSaIFBgReRPe5KA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/colinhacks"
+      }
     }
   }
 }
diff --git a/server/package.json b/server/package.json
index 94bd3aa..dfe1ad8 100644
--- a/server/package.json
+++ b/server/package.json
@@ -5,7 +5,7 @@
   "main": "server.js",
   "scripts": {
     "dev": "ts-node-dev --respawn src/start.ts",
-    "test": "npx vitest run"
+    "test": "NODE_ENV=test npx vitest run"
   },
   "keywords": [],
   "author": "",
@@ -15,14 +15,18 @@
     "@fastify/cors": "^11.0.1",
     "@prisma/client": "^6.12.0",
     "bcrypt": "^6.0.0",
+    "dotenv": "^17.2.1",
     "fastify": "^5.4.0",
-    "fastify-cookie": "^5.6.1"
+    "fastify-cookie": "^5.6.1",
+    "zod": "^4.0.10"
   },
   "devDependencies": {
     "@types/bcrypt": "^6.0.0",
+    "@types/cookie-signature": "^1.1.2",
     "@types/node": "^24.1.0",
     "@types/supertest": "^6.0.3",
     "@vitest/ui": "^3.2.4",
+    "cookie-signature": "^1.2.2",
     "prisma": "^6.12.0",
     "supertest": "^7.1.4",
     "ts-node-dev": "^2.0.0",
diff --git a/server/prisma/schema.prisma b/server/prisma/schema.prisma
index 305fced..1069a67 100644
--- a/server/prisma/schema.prisma
+++ b/server/prisma/schema.prisma
@@ -17,7 +17,7 @@ model User {
 
 model Product {
   id          Int         @id @default(autoincrement())
-  name        String
+  name        String      @unique
   price       Int
   stock       Int
   discount    Int?
@@ -28,18 +28,18 @@ model Product {
 
 model Order {
   id         Int         @id @default(autoincrement())
-  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
   user_id    Int
   total      Int
   created_at DateTime    @default(now())
+  user       User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
   items      OrderItem[]
 }
 
 model OrderItem {
   id         Int     @id @default(autoincrement())
-  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
   order_id   Int
-  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
   product_id Int
   quantity   Int
+  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
+  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
 }
diff --git a/server/prisma/seed.ts b/server/prisma/seed.ts
index 0bdbcca..60e0185 100644
--- a/server/prisma/seed.ts
+++ b/server/prisma/seed.ts
@@ -1,24 +1,32 @@
-import bcrypt from 'bcrypt'
 import { PrismaClient } from '@prisma/client'
+import bcrypt from 'bcrypt'
 
-const prisma = new PrismaClient()
+export default async function seed() {
+  const prisma = new PrismaClient()
+  await prisma.$connect()
 
-async function seed() {
-  await prisma.user.deleteMany() // clear existing users
+  /* Users */
+  await prisma.user.deleteMany()
 
   const hashedPassword = await bcrypt.hash('SnackBoss2025', 10)
-  await prisma.user.create({
-    data: {
+  await prisma.user.upsert({
+    where: { username: 'admin' },
+    update: { password: hashedPassword },
+    create: {
       username: 'admin',
       password: hashedPassword,
       is_admin: true,
     },
   })
-}
 
-void seed()
-  .catch((e) => {
-    console.error(e)
-    process.exit(1)
+  /* Products */
+  await prisma.product.deleteMany()
+  await prisma.product.createMany({
+    data: [
+      { name: 'Product A', price: 100, stock: 10 },
+      { name: 'Product B', price: 200, stock: 5 },
+    ],
   })
-  .finally(() => void prisma.$disconnect())
+
+  await prisma.$disconnect()
+}
diff --git a/server/src/plugins/authMiddleware.ts b/server/src/plugins/authMiddleware.ts
index 7e0292b..6e057e7 100644
--- a/server/src/plugins/authMiddleware.ts
+++ b/server/src/plugins/authMiddleware.ts
@@ -1,11 +1,30 @@
 import { FastifyRequest, FastifyReply } from 'fastify'
 
+type SessionPayload = {
+  username: string
+  isAdmin: boolean
+}
+
 export async function authMiddleware(req: FastifyRequest, reply: FastifyReply) {
+  /* 1. No cookie? Unauthorized */
+  if (!req.cookies.session) {
+    return reply.status(401).send({ message: 'Unauthorized' })
+  }
+
+  /* 2. Attempt to unsign */
   const session = req.unsignCookie(req.cookies.session)
 
+  /* 3. Invalid signature or empty payload? Unauthorized */
   if (!session.valid || !session.value) {
-    return reply.status(401).send({ message: 'Not authenticated' })
+    return reply.status(401).send({ message: 'Unauthorized' })
   }
 
-  req.user = { username: session.value }
+  /* 4. Parse and attach user */
+  req.user = JSON.parse(session.value) as SessionPayload
+}
+
+/* Helper function to protect admin-only routes */
+export async function requireAdmin(req: FastifyRequest, reply: FastifyReply) {
+  await authMiddleware(req, reply)
+  if (!req.user?.isAdmin) return reply.status(401).send({ message: 'Unauthorized' })
 }
diff --git a/server/src/routes/auth.ts b/server/src/routes/auth.ts
index 8ca63a3..748dd75 100644
--- a/server/src/routes/auth.ts
+++ b/server/src/routes/auth.ts
@@ -5,7 +5,6 @@ import { authMiddleware } from '../plugins/authMiddleware'
 /* eslint-disable @typescript-eslint/require-await */
 export default async function authRoutes(app: FastifyInstance) {
   /* Register a new user */
-
   app.post('/register', async (req, reply) => {
     const { username, password } = req.body as {
       username: string
@@ -33,7 +32,6 @@ export default async function authRoutes(app: FastifyInstance) {
   })
 
   /* Login */
-
   app.post('/login', async (req, reply) => {
     const { username, password } = req.body as {
       username: string
@@ -46,7 +44,7 @@ export default async function authRoutes(app: FastifyInstance) {
       if (!result.authenticated) return reply.status(401).send({ message: 'Not authenticated' })
 
       /* Set a signed cookie */
-      reply.setCookie('session', username, {
+      reply.setCookie('session', JSON.stringify({ username, isAdmin: result.isAdmin }), {
         path: '/',
         httpOnly: true,
         sameSite: 'lax',
diff --git a/server/src/routes/orders.ts b/server/src/routes/orders.ts
index dc5e45e..c1e3e3c 100644
--- a/server/src/routes/orders.ts
+++ b/server/src/routes/orders.ts
@@ -4,7 +4,6 @@ import { authMiddleware } from '../plugins/authMiddleware'
 /* eslint-disable @typescript-eslint/require-await */
 export default async function orderRoutes(app: FastifyInstance) {
   /* Create new order */
-
   app.post('/orders', async (req, reply) => {
     await authMiddleware(req, reply)
     return reply.send({ user: req.user })
diff --git a/server/src/routes/product.ts b/server/src/routes/product.ts
index 74cb1d7..caf962d 100644
--- a/server/src/routes/product.ts
+++ b/server/src/routes/product.ts
@@ -1,18 +1,44 @@
 import { FastifyInstance } from 'fastify'
+import { createProduct, getAllProducts } from '../services/productService'
+import { ProductSchema } from '../types/product'
+import { requireAdmin } from '../plugins/authMiddleware'
 
 /* eslint-disable @typescript-eslint/require-await */
 export default async function productRoutes(app: FastifyInstance) {
   /* List all products */
-
-  app.get('/products', async (req, reply) => {
-    const products = await app.prisma.product.findMany()
-    reply.send(products)
+  app.get('/products', async (_req, reply) => {
+    const products = await getAllProducts(app)
+    return reply.send(products)
   })
 
   /* Add new product (admin only) */
-  // eslint-disable-next-line  @typescript-eslint/no-unused-vars
+
   app.post('/products', async (req, reply) => {
-    /* TODO */
+    try {
+      await requireAdmin(req, reply) // Check if the user is authorized
+
+      const parseResult = ProductSchema.safeParse(req.body) // Try to parse request body according to model schema
+
+      if (!parseResult.success) {
+        // Return 400 on missing values
+        return reply.status(400).send({
+          message: 'Invalid product input',
+          errors: parseResult.error.flatten().fieldErrors,
+        })
+      }
+
+      // Create new Product if everything went well
+      const data = parseResult.data
+      const newProduct = await createProduct(app, data)
+
+      return reply.status(201).send(newProduct) // Return 201 and the new Product
+    } catch (err) {
+      if (err instanceof Error) {
+        if (err.message === 'Product with this name already exists') {
+          return reply.status(409).send('Product with this name already exists')
+        }
+      }
+    }
   })
 
   /* Update/edit product (admin only) */
diff --git a/server/src/server.ts b/server/src/server.ts
index 698daec..c05215e 100644
--- a/server/src/server.ts
+++ b/server/src/server.ts
@@ -1,5 +1,6 @@
 import Fastify from 'fastify'
 import cookie from 'fastify-cookie'
+import * as signature from 'cookie-signature'
 import cors from '@fastify/cors'
 import prismaPlugin from './plugins/prisma'
 import authRoutes from './routes/auth'
@@ -7,17 +8,41 @@ import productRoutes from './routes/product'
 import orderRoutes from './routes/orders'
 
 export async function buildServer() {
-  const app = Fastify({ logger: true })
+  const app = Fastify({
+    logger:
+      process.env.NODE_ENV === 'test'
+        ? { level: 'error' } // or false to silence completely
+        : { level: 'info' },
+  })
 
   /* Register core plugins */
   app.register(cors, {
     origin: process.env.FRONTEND_ORIGIN || 'http://localhost:5173',
     credentials: true,
   })
+
+  /* Override Cookie signing for testing */
   app.register(cookie, {
-    secret: process.env.COOKIE_SECRET || 'super-secret-key',
-    parseOptions: {},
+    secret: {
+      sign: (value) =>
+        's:' + signature.sign(value, process.env.COOKIE_SECRET || 'super-secret-key'),
+      unsign: (value) => {
+        if (!value.startsWith('s:')) {
+          return { valid: false, renew: false, value: null }
+        }
+
+        const str = value.slice(2)
+        const unsigned = signature.unsign(str, process.env.COOKIE_SECRET || 'super-secret-key')
+
+        if (unsigned === false) {
+          return { valid: false, renew: false, value: null }
+        }
+
+        return { valid: true, renew: false, value: unsigned }
+      },
+    },
   })
+
   app.register(prismaPlugin)
 
   /* Register routes */
diff --git a/server/src/types/fastify.d.ts b/server/src/types/fastify.d.ts
index 7c345fd..32f18c8 100644
--- a/server/src/types/fastify.d.ts
+++ b/server/src/types/fastify.d.ts
@@ -7,6 +7,7 @@ declare module 'fastify' {
   interface FastifyRequest {
     user?: {
       username: string
+      isAdmin: boolean
     }
   }
 }
diff --git a/server/tests/auth.test.ts b/server/tests/auth.test.ts
deleted file mode 100644
index c88bdb6..0000000
--- a/server/tests/auth.test.ts
+++ /dev/null
@@ -1,130 +0,0 @@
-import { describe, it, expect, beforeAll, vi, afterAll } from 'vitest'
-import request from 'supertest'
-import { buildServer } from '../src/server'
-import * as userService from '../src/services/userService'
-
-let app: Awaited<ReturnType<typeof buildServer>>
-
-beforeAll(async () => {
-  app = await buildServer()
-})
-
-afterAll(async () => {
-  await app.close()
-})
-
-describe('Auth', () => {
-  describe('Registration', () => {
-    it('registers a new user successfully and returns status 201', async () => {
-      const response = await request(app.server)
-        .post('/api/register')
-        .send({ username: 'testuser', password: '123456' })
-
-      expect(response.status).toBe(201)
-      expect(response.text).toContain('User created')
-    })
-
-    it('returns 409 if username is already taken', async () => {
-      const response = await request(app.server)
-        .post('/api/register')
-        .send({ username: 'admin', password: '123456' })
-
-      expect(response.status).toBe(409)
-      expect(response.text).toContain('Username already taken')
-    })
-
-    it('returns 500 if registration service throws an error', async () => {
-      // Mock the service to throw an error
-      vi.spyOn(userService, 'registerUser').mockImplementationOnce(() => {
-        throw new Error('Database failure')
-      })
-
-      const response = await request(app.server)
-        .post('/api/register')
-        .send({ username: 'failuser', password: '123456' })
-
-      expect(response.status).toBe(500)
-      expect(response.text).toContain('Internal server error')
-    })
-  })
-
-  describe('Login', () => {
-    it('authenticates valid user credentials and returns status 200', async () => {
-      const response = await request(app.server)
-        .post('/api/login')
-        .send({ username: 'admin', password: 'SnackBoss2025' })
-
-      expect(response.status).toBe(200)
-      expect(response.text).toContain(['"authenticated":true', '"isAdmin":true'])
-    })
-
-    it('returns 401 on invalid user credentials', async () => {
-      let response = await request(app.server)
-        .post('/api/login')
-        .send({ username: 'failuser', password: 'SnackBoss2025' })
-
-      expect(response.status).toBe(401)
-      expect(response.text).toContain('Not authenticated')
-
-      response = await request(app.server)
-        .post('/api/login')
-        .send({ username: 'admin', password: 'failpass' })
-
-      expect(response.status).toBe(401)
-      expect(response.text).toContain('Not authenticated')
-    })
-
-    it('returns 500 if login service throws an error', async () => {
-      // Mock the service to throw an error
-      vi.spyOn(userService, 'loginUser').mockImplementationOnce(() => {
-        throw new Error('Database failure')
-      })
-
-      const response = await request(app.server)
-        .post('/api/login')
-        .send({ username: 'admin', password: 'SnackBoss2025' })
-
-      expect(response.status).toBe(500)
-      expect(response.text).toContain('Internal server error')
-    })
-  })
-})
-
-describe('Session Authentication', () => {
-  it('sets a signed session cookie on successful login and allows access to protected routes', async () => {
-    const response = await request(app.server)
-      .post('/api/login')
-      .send({ username: 'admin', password: 'SnackBoss2025' })
-
-    expect(response.status).toBe(200)
-    expect(response.headers['set-cookie']).toBeDefined()
-
-    const cookie = response.headers['set-cookie'][0]
-
-    const protectedRes = await request(app.server)
-      .post('/api/orders') // <-- update this to a real protected route
-      .set('Cookie', cookie)
-
-    expect(protectedRes.status).toBe(200)
-    expect((protectedRes.body as { user: { username: string } }).user).toEqual({
-      username: 'admin',
-    })
-  })
-
-  it('clears the session cookie on logout', async () => {
-    // 1. Login
-    const loginRes = await request(app.server)
-      .post('/api/login')
-      .send({ username: 'admin', password: 'SnackBoss2025' })
-
-    const cookie = loginRes.headers['set-cookie'][0]
-
-    // 2. Logout
-    const logoutRes = await request(app.server).post('/api/logout').set('Cookie', cookie)
-
-    expect(logoutRes.status).toBe(200)
-    expect(logoutRes.body as { message: string }).toBe('Logged out successfully')
-    expect(logoutRes.headers['set-cookie']).toBeDefined()
-    expect(logoutRes.headers['set-cookie'][0]).toMatch(/session=;/)
-  })
-})
diff --git a/server/tsconfig.json b/server/tsconfig.json
index 3f7963c..c8006f7 100644
--- a/server/tsconfig.json
+++ b/server/tsconfig.json
@@ -9,6 +9,6 @@
     "resolveJsonModule": true
   },
   "files": ["src/types/fastify.d.ts"],
-  "include": ["src", "tests", "prisma", "vitest.config.ts", "vitest.setup.ts"],
+  "include": ["src", "test", "prisma", "vitest.config.ts", "vitest.setup.ts"],
   "exclude": ["node_modules", "dist"]
 }
diff --git a/server/vitest.config.ts b/server/vitest.config.ts
index 9b5a0a9..1bdb77c 100644
--- a/server/vitest.config.ts
+++ b/server/vitest.config.ts
@@ -4,7 +4,7 @@ export default defineConfig({
   test: {
     globals: true,
     environment: 'node',
-    include: ['tests/**/*.test.ts'],
+    include: ['test/**/*.test.ts'],
     setupFiles: ['./vitest.setup.ts'],
   },
 })
diff --git a/server/vitest.setup.ts b/server/vitest.setup.ts
index 6ce6167..c670fc6 100644
--- a/server/vitest.setup.ts
+++ b/server/vitest.setup.ts
@@ -1,7 +1,19 @@
 import { execSync } from 'child_process'
 import { beforeEach } from 'vitest'
+import seed from './prisma/seed'
 
-beforeEach(() => {
-  /* Run the seed script before each tests */
-  execSync('ts-node prisma/seed.ts')
+process.env.DATABASE_URL = 'postgresql://postgres:postgres@localhost:5432/snackshop_test'
+console.log('🧪 Using test DB:', process.env.DATABASE_URL)
+
+beforeEach(async () => {
+  /* Reset DB before each tests */
+  execSync('npx prisma migrate reset --force --skip-seed', {
+    stdio: ['ignore', 'pipe', 'inherit'],
+    env: {
+      ...process.env,
+    },
+  })
+
+  /* Also reseed */
+  await seed()
 })
